#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>
#include <Adafruit_ADS1X15.h>
#include <TensorFlowLite.h>
#include "model.h" 

#include <Arduino.h>
#include <FirebaseClient.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>

#include <Wire.h>
#include <Adafruit_ADS1X15.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>

#define FIREBASE_HOST "psdatabase-fb5fe-default-rtdb.firebaseio.com"
#define FIREBASE_AUTH "AIzaSyAeCOk_JF2QCtSxUsRS6gYeESK0Q6zNNnw"
#define FIREBASE_ROOT "/esptflite/"
#define FIREBASE_SEND_DATA_INTERVAL 3000
#define MQ7_READ_SENSOR_INTERVAL 3000
#define WIFI_SSID "Default"
#define WIFI_PASSWORD "default234"
#define MQ7_CHANNEL 2
#define MQ135_CHANNEL 1
#define GP2Y1014_CHANNEL 0
#define GP2Y1014_LED_PIN 25
#define MOVING_AVERAGE_WINDOW_SIZE 10


WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 0, 60000);

WiFiClientSecure ssl;
DefaultNetwork network;
AsyncClientClass client(ssl, getNetwork(network));

FirebaseApp app;
RealtimeDatabase Database;
AsyncResult result;
LegacyToken dbSecret(FIREBASE_AUTH);

Adafruit_ADS1115 ads;
Adafruit_BME680 bme;

unsigned long previousFirebaseTime = 0;
unsigned long previousMQ7Time = 0;
int16_t mq7Value = 0;
int16_t mq135Value = 0;

float mq7Readings[WINDOW_SIZE];
float mq135Readings[WINDOW_SIZE];
float dustReadings[WINDOW_SIZE];

int mq7Index = 0;
int mq135Index = 0;
int dustIndex = 0;

float mq7Avg = 0;
float mq135Avg = 0;
float dustAvg = 0;

tflite::ops::micro::AllOpsResolver resolver;
tflite::MicroInterpreter* interpreter;
tflite::Model* model;
float input[4];

void setup() {
  Serial.begin(115200);
  Wire.begin();
  delay(1500);

  if (!ads.begin()) {
    Serial.println("ADS1115 tidak terdeteksi. Cek koneksi!");
    while (1);
  }
  
  Serial.println("ADS1115 terdeteksi!");

  if (!bme.begin()) {
    Serial.println("BME680 tidak terdeteksi!");
    while (1);
  }
  Serial.println("BME680 terdeteksi!");

  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  Firebase.printf("Firebase Client v%s\n", FIREBASE_CLIENT_VERSION);

  ssl.setInsecure();
  initializeApp(client, app, getAuth(dbSecret));
  app.getApp<RealtimeDatabase>(Database);
  Database.url(FIREBASE_HOST);
  client.setAsyncResult(result);

  timeClient.begin();
  timeClient.update();

  pinMode(GP2Y1014_LED_PIN, OUTPUT);

  model = tflite::GetModel(model_tflite);
  interpreter = new tflite::MicroInterpreter(model, resolver, tensor_arena, kTensorArenaSize);
  interpreter->AllocateTensors();
  
  Serial.println("ESP32 ready!");
}

void loop() {
  timeClient.update();

  time_t epochTime = timeClient.getEpochTime();
  struct tm timeinfo;
  localtime_r(&epochTime, &timeinfo);

  char dateTimeString[20];
  snprintf(dateTimeString, sizeof(dateTimeString), "%04d-%02d-%02d %02d:%02d:%02d",
            timeinfo.tm_year + 1900,
            timeinfo.tm_mon + 1,
            timeinfo.tm_mday,
            timeinfo.tm_hour,
            timeinfo.tm_min,
            timeinfo.tm_sec);

  if (millis() - previousMQ7Time >= MQ7_READ_SENSOR_INTERVAL) {
    mq7Value = ads.readADC_SingleEnded(MQ7_CHANNEL);
    previousMQ7Time = millis();
  }

  mq135Value = ads.readADC_SingleEnded(MQ135_CHANNEL);
  bool bmeValue = bme.performReading();

  int CO2value = random(0, 100);
  int COvalue = random(0, 100);
  int airQualityvalue = random(0, 100);
  int dustvalue = random(0, 100);

  mq7Readings[mq7Index] = mq7Value;
  mq135Readings[mq135Index] = mq135Value;
  dustReadings[dustIndex] = dustValue;

  mq7Avg = calculateMovingAverage(mq7Readings);
  mq135Avg = calculateMovingAverage(mq135Readings);
  dustAvg = calculateMovingAverage(dustReadings);

  digitalWrite(GP2Y1014_LED_PIN, LOW);
  delay(280);
  int16_t dustValue = ads.readADC_SingleEnded(GP2Y1014_CHANNEL);
  digitalWrite(GP2Y1014_LED_PIN, HIGH);
  delay(40);

  input[0] = dustValue;          
  input[1] = mq135Value;        
  input[2] = temperature;       
  input[3] = mq7Value;          
  
  float* input_tensor = interpreter->input(0)->data.f;
  for (int i = 0; i < 4; i++) {
    input_tensor[i] = input[i];
  }

  interpreter->Invoke();

  float* output = interpreter->output(0)->data.f;

  int predicted_class = 0;
  float max_probability = output[0];
  for (int i = 1; i < 3; i++) {
    if (output[i] > max_probability) {
      max_probability = output[i];
      predicted_class = i;
    }
  }

  // Menampilkan hasil prediksi kelas
  String label;
  if (predicted_class == 0) {
    label = "rendah";
  } else if (predicted_class == 1) {
    label = "sedang";
  } else {
    label = "tinggi";
  }

  Serial.print("Prediksi kategori: ");
  Serial.println(label);

  mq7Index = (mq7Index + 1) % WINDOW_SIZE;
  mq135Index = (mq135Index + 1) % WINDOW_SIZE;
  dustIndex = (dustIndex + 1) % WINDOW_SIZE;

  delay(1000);
}

float calculateMovingAverage(float readings[]) {
  float sum = 0;
  for (int i = 0; i < WINDOW_SIZE; i++) {
    sum += readings[i];
  }
  return sum / WINDOW_SIZE;
}
